{"version":3,"sources":["components/confing-side/DatePicker.js","actions/index.js","components/confing-side/TimePicker.js","components/confing-side/EventNameForm.js","components/confing-side/index.js","components/main-side/EventNameDisplay.js","components/main-side/TimeAndDate.js","components/main-side/index.js","App.js","reducers/GetDateReducer.js","reducers/GetTimeReducer.js","reducers/EvetNameReducer.js","reducers/index.js","index.js"],"names":["DatePickerC","dispatchDate","useDispatch","showDate","useSelector","state","date","dateFormat","selected","onChange","type","payload","getDateAction","minDate","Date","TimePicker","dispatchTime","showTime","clock","time","getTimeAction","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","EventName","dispatchName","inputRef","useRef","ref","e","name","target","value","getEventName","placeholder","LeftSide","DatePicker","eventName","TimeAndDate","timeProp","dateProp","useState","timePropLocal","setTimeProp","datePropLocal","setDateProp","useEffect","renderDateTimeLeft","setInterval","now","distanceTime","distanceDate","days","Math","floor","hours","minutes","seconds","hour","minute","second","day","clearInterval","toDateString","MainSide","App","id","getDateReducer","parse","GetTimeReducer","getTime","EventNameReducer","allReducers","combineReducers","GetDateReducer","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb4beaee.chunk.js","sourcesContent":["import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getDateAction } from \"../../actions\";\r\n\r\nconst DatePickerC = () => {\r\n  const dispatchDate = useDispatch();\r\n  const showDate = useSelector(state => state.date);\r\n\r\n  const handleDispatchDate = date => {\r\n    return dispatchDate(getDateAction(date));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <DatePicker\r\n        dateFormat=\"dd/MM/yyyy\"\r\n        selected={showDate}\r\n        onChange={handleDispatchDate}\r\n        minDate={new Date()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatePickerC;\r\n","export const getDateAction = date => {\r\n  return {\r\n    type: \"calendar\",\r\n    payload: date\r\n  };\r\n};\r\n\r\nexport const getTimeAction = time => {\r\n  return {\r\n    type: \"clock\",\r\n    payload: time\r\n  };\r\n};\r\n\r\nexport const getEventName = name => {\r\n  return {\r\n    type: \"name\",\r\n    payload: name\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getTimeAction } from \"../../actions\";\r\n\r\nconst TimePicker = () => {\r\n  const dispatchTime = useDispatch();\r\n  const showTime = useSelector(state => state.clock);\r\n\r\n  const handleDispatchTime = time => {\r\n    return dispatchTime(getTimeAction(time));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <DatePicker\r\n        selected={showTime}\r\n        onChange={handleDispatchTime}\r\n        showTimeSelect\r\n        showTimeSelectOnly\r\n        timeIntervals={10}\r\n        timeCaption=\"Time\"\r\n        dateFormat=\"HH:mm\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimePicker;\r\n","import React, { useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getEventName } from \"../../actions\";\r\n\r\nconst EventName = () => {\r\n  const dispatchName = useDispatch();\r\n  const inputRef = useRef();\r\n\r\n  const handleEventName = e => {\r\n    const name = e.target.value;\r\n    dispatchName(getEventName(name));\r\n  };\r\n  return (\r\n    <div>\r\n      <input\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        onChange={handleEventName}\r\n        placeholder=\"Event Name\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventName;\r\n","import React from \"react\";\r\nimport DatePicker from \"./DatePicker\";\r\nimport TimePicker from \"./TimePicker\";\r\nimport EventName from \"./EventNameForm\";\r\n\r\nconst LeftSide = () => {\r\n  return (\r\n    <div>\r\n      <p>Countdown title</p>\r\n      <EventName />\r\n      <p>Countdown to date:</p>\r\n      <DatePicker />\r\n      <p>Event time:</p>\r\n      <TimePicker />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeftSide;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst EventName = () => {\r\n  const eventName = useSelector(({ eventName }) => eventName);\r\n\r\n  return <p>{eventName}</p>;\r\n};\r\n\r\nexport default EventName;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst TimeAndDate = () => {\r\n  let timeProp = useSelector(state => state.clock);\r\n  let dateProp = useSelector(state => state.date);\r\n\r\n  const [timePropLocal, setTimeProp] = useState({});\r\n  const [datePropLocal, setDateProp] = useState({});\r\n\r\n  useEffect(() => {\r\n    const renderDateTimeLeft = setInterval(() => {\r\n      let now = new Date();\r\n\r\n      let distanceTime = timeProp - now;\r\n      let distanceDate = dateProp - now;\r\n\r\n      let days = Math.floor(distanceDate / (1000 * 60 * 60 * 24));\r\n      let hours = Math.floor(\r\n        (distanceTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      let minutes = Math.floor((distanceTime % (1000 * 60 * 60)) / (1000 * 60));\r\n      let seconds = Math.floor((distanceTime % (1000 * 60)) / 1000);\r\n\r\n      setTimeProp({\r\n        ...timePropLocal,\r\n        hour: hours,\r\n        minute: minutes,\r\n        second: seconds\r\n      });\r\n\r\n      setDateProp({ day: days + 1 });\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(renderDateTimeLeft);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <span>\r\n        {datePropLocal.day}\r\n        {datePropLocal.day > 1 || datePropLocal.day < -1 ? ' days ' : ' day '}\r\n      </span>\r\n      <span>\r\n        {timePropLocal.hour}\r\n        {timePropLocal.hour > 1 || timePropLocal.hour < -1\r\n          ? ' hours '\r\n          : ' hour '}\r\n      </span>\r\n      <span>\r\n        {timePropLocal.minute}\r\n        {timePropLocal.minute > 1 || timePropLocal.minute < -1\r\n          ? ' minutes '\r\n          : ' minute '}\r\n      </span>\r\n      <span>\r\n        {timePropLocal.second}\r\n        {timePropLocal.second > 1 || timePropLocal.second < -1\r\n          ? ' seconds '\r\n          : ' second '}\r\n      </span>\r\n      <p>{new Date(dateProp).toDateString()}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeAndDate;\r\n","import React from \"react\";\r\nimport EventName from \"./EventNameDisplay\";\r\nimport TimeAndDate from \"./TimeAndDate\";\r\n\r\nconst MainSide = () => {\r\n  return (\r\n    <div>\r\n      <EventName />\r\n      <TimeAndDate />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainSide;\r\n","import React from \"react\";\nimport LeftSide from \"./components/confing-side\";\nimport MainSide from \"./components/main-side\";\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <LeftSide />\n      <MainSide />\n    </div>\n  );\n}\n\nexport default App;\n","const getDateReducer = (state = Date.parse(new Date()), { type, payload }) => {\r\n  switch (type) {\r\n    case \"calendar\":\r\n      return Date.parse(payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default getDateReducer;\r\n","const GetTimeReducer = (state = new Date(), { type, payload }) => {\r\n  switch (type) {\r\n    case \"clock\":\r\n      return payload.getTime();\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default GetTimeReducer;\r\n","const EventNameReducer = (state = \"Event Name\", { type, payload }) => {\r\n  switch (type) {\r\n    case \"name\":\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default EventNameReducer;\r\n","import GetDateReducer from \"./GetDateReducer\";\r\nimport GetTimeReducer from \"./GetTimeReducer\";\r\nimport EventNameReducer from \"./EvetNameReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst allReducers = combineReducers({\r\n  date: GetDateReducer,\r\n  clock: GetTimeReducer,\r\n  eventName: EventNameReducer\r\n});\r\n\r\nexport default allReducers;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore } from \"redux\";\nimport allReducers from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}